pipeline {
    agent any

    tools {
        maven 'M2_HOME' // Assure-toi que 'M2_HOME' correspond au nom de l'installation Maven dans Jenkins
    }

    environment {
        SONARQUBE_TOKEN = credentials('jenkins-sonar') // ID du token SonarQube 
        DOCKERHUB_CREDENTIALS = credentials('nourchaine-dockerhub')
    }

    stages {
        /* 
        stage('Checkout') {
            steps {
                // Clonage du dépôt Git depuis la branche nourchaine
                git branch: 'nourchaine', url: 'https://github.com/Si-aymen/Courzelo-Devops.git'
            }
        }

        stage('Build') {
            steps {
                // Exécution de la construction Maven
                sh 'mvn -f backendPidev/pom.xml clean install'
            }
        }

        stage('Test') {
            steps {
                // Exécution des tests Maven
                sh 'mvn -f backendPidev/pom.xml test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('admin') { //  serveur SonarQube  configuré dans Jenkins
                    sh "mvn -f backendPidev/pom.xml sonar:sonar -Dsonar.login=$SONARQUBE_TOKEN"
                }
            }
        }
        */

        stage('Deploy to Nexus') {
            steps {
                // Déploiement vers Nexus, en ignorant les tests
                sh 'mvn -f backendPidev/pom.xml deploy -DskipTests'
            }
        }

        /*
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image'
                    sh 'docker build -t nourchaine/devops:latest -f backendPidev/Dockerfile .'
                }
            }
        }

        stage('Login Docker') {
            steps {
                echo 'Login to DockerHub'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Push Image') {
            steps {
                script {
                    echo 'Pushing Docker Image to Docker Hub'
                    sh 'docker push nourchaine/devops:latest'
                }
            }
        }
        */
    }

    post {
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
