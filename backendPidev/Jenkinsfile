pipeline {
    agent any

    tools {
        maven 'M2_HOME' // Assure-toi que 'M2_HOME' correspond au nom de l'installation Maven dans Jenkins
    }
environment {
        SONARQUBE_TOKEN = credentials('jenkins-sonar') // ID du token SonarQube 
        DOCKERHUB_TOKEN = credentials('nourchaine-dockerhub')
    }

    stages {
        stage('Checkout') {
            steps {
                // Clonage du dépôt Git depuis la branche nourchaine
                git branch: 'nourchaine', url: 'https://github.com/Si-aymen/Courzelo-Devops.git'
            }
        }

        stage('Build') {
            steps {
                // Exécution de la construction Maven
                sh 'mvn -f backendPidev/pom.xml clean install'

            }
        }

        stage('Test') {
            steps {
                // Exécution des tests Maven
                sh 'mvn -f backendPidev/pom.xml clean install'

            }
        }

       stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('admin') { //  serveur SonarQube  configuré dans Jenkins
                    sh "mvn -f backendPidev/pom.xml sonar:sonar -Dsonar.login=$SONARQUBE_TOKEN"
                }
            }
        }
        
         stage('Deploy to Nexus') {
            steps {
                // Déploiement vers Nexus, en ignorant les tests
                sh 'mvn -f backendPidev/pom.xml deploy -DskipTests'
            }
        }

        
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image'
                    sh 'docker build -t nourchainesahli/coursms:1.0.0 -f backendPidev/Dockerfile backendPidev'
                }
            }
        }

        stage('Deploy Image to DockerHub') {
            steps {
                script {
                    echo 'Logging into DockerHub and Pushing Image'
                      sh 'docker push nourchainesahli/coursms:1.0.0'
                }
            }
        }
    }


    post {
        success {
            // Décommenter si nécessaire
            // emailext(
            //     to: 'nourchaine.sahli@gmail.com',
            //     subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            //     body: "Le build a réussi !",
            //     attachLog: true
            // )
             echo "Pipeline completed successfully."
        }
        failure {
            // Décommenter si nécessaire
            // emailext(
            //     to: 'nourchaine.sahli@gmail.com',
            //     subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
            //     body: "Le build a échoué. Consultez les logs pour plus de détails.",
            //     attachLog: true
            // )
             echo "Pipeline failed."
        }
    }
}
