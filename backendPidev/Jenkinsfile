pipeline {
    agent any

    tools {
        maven 'M2_HOME' // Ensure 'M2_HOME' matches the Maven installation name in Jenkins
    }

    environment {

        EMAIL_RECIPIENT = 'yosra.oueslati@esprit.tn'
    }
    stages {
      stage('Checkout') {
          steps {
              checkout([$class: 'GitSCM', branches: [[name: '*/YosraOUESLATI-5SAE7-G6']], userRemoteConfigs: [[url: 'https://github.com/Si-aymen/5SAE7-G6-CourZelo.git']], shallow: true])
          }
      }

        

        stage('Clean-install') {
            steps {
                dir('backendPidev') { // Adjust if needed based on directory structure
                    sh 'mvn clean install'
                }
            }
        }
      
        stage('Test JUNIT ') {
                   steps {
                       dir('backendPidev') { // Adjust if needed
                           sh 'mvn test'
                       }
                       // Archive test results for JUnit
                       junit 'backendPidev/target/surefire-reports/*.xml'
                   }
               }


              stage('Build Docker Image') {
                  steps {
                      script {
                          echo 'Building Docker Image'
                          // Make sure to specify the correct Dockerfile path
                          sh ' docker build -t yosra2001/yosraoueslati-5sae7-g6-courzelo:1.0.0 -f backendPidev/Dockerfile backendPidev'
                      }
                  }
              }


                      stage('Deploy Image to DockerHub') {
                          steps {
                              script {
                                  echo 'Logging into DockerHub and Pushing Image'
                                  sh 'docker login -u yosra2001 -p machine*learning'
                                  sh 'docker push yosra2001/yosraoueslati-5sae7-g6-courzelo:1.0.0'
                              }
                          }
                      }

                     stage('Monitoring Setup (Prometheus & Grafana)') {
                          steps {
                            script {
                                 echo 'Setting up Prometheus and Grafana monitoring'
                                sh 'docker-compose -f backendPidev/monitoring/docker-compose.yml up -d --remove-orphans'
                             }
                         }
                      }





                       stage('Generate JaCoCo Report') {
                                  steps {
                                      echo 'Generating JaCoCo Report'
                                      dir('backendPidev') {
                                          sh 'mvn jacoco:report'
                                      }
                                  }
                              }

                              stage('JaCoCo Coverage Report') {
                                  steps {
                                      echo 'Publishing JaCoCo Coverage Report'
                                      step([$class: 'JacocoPublisher',
                                            execPattern: '**/target/jacoco.exec',
                                            classPattern: '**/target/classes/**/*.class',
                                            sourcePattern: '**/src/main/java/**/*.java',
                                            exclusionPattern: '**/target/**,**/*Test*,**/_javassist/**'
                                      ])
                                  }
                              }

      stage('SonarQube Analysis') {
            steps {
                dir('backendPidev') {
                    script {
                        withSonarQubeEnv('sonar courZelo') {
                            sh '''
                                mvn sonar:sonar \
                                -Dsonar.projectKey=Courzello \
                                -Dsonar.host.url=http://192.168.33.10:9000 \
                                -Dsonar.login=admin \
                                -Dsonar.password=Aymenrahali@6631 \
                                -Dmaven.test.skip=true
                            '''
                        }
                    }
                }
            }
        }
       //("Quality Gate") {
        //   steps {
            //   echo 'Waiting for SonarQube Quality Gate result...'
            //   timeout(time: 2, unit: 'MINUTES') {
                //   waitForQualityGate abortPipeline: true
             //  }
         //  }
      // }




        stage ('Nexus'){
            steps {
                dir('backendPidev') {
                sh 'mvn deploy ' 
                }
            }
        }   
    }

    post {
           success {
               mail to: "${env.EMAIL_RECIPIENT}",
                    subject: " Jenkins - Success - Build #${BUILD_NUMBER}",
                    body: """ Jenkins
                    Result: The pipeline has completed successfully.
                    Build number: ${BUILD_NUMBER}. No action required."""
           }
           failure {
               mail to: "${env.EMAIL_RECIPIENT}",
                    subject: " Jenkins - Failure - Build #${BUILD_NUMBER}",
                    body: """ Jenkins
                    Result: The pipeline has failed. Build number: ${BUILD_NUMBER}.
                    Please try again."""
           }
           always {
               echo 'Pipeline completed.'
           }
       }
}
