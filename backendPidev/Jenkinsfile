pipeline {
    agent any

    tools {
        maven 'M2_HOME' // Assure-toi que 'M2_HOME' correspond au nom de l'installation Maven dans Jenkins
    }

    environment {
        SONARQUBE_TOKEN = credentials('jenkins-sonar') // ID du token SonarQube 
        DOCKERHUB_CREDENTIALS = credentials('nourchaine-dockerhub')
        NEXUS_VERSION = "nexus3"
        NEXUS_CREDENTIALS = credentials('nexus_cred')
        NEXUS_REPOSITORY = "maven-nexus-repo"
    }

    stage('Checkout') {
            steps {
                // Configurer le buffer HTTP de Git avant le clonage
                sh 'git config --global http.postBuffer 1048576000'

                // Clonage du dépôt Git depuis la branche nourchaine
               // 
        sh 'git config --global http.maxRequestBuffer 524288000'
        sh 'git config --global core.compression 9'
        sh 'git config --global http.lowSpeedLimit 1024'
        sh 'git config --global http.lowSpeedTime 60'
        git branch: 'nourchaine', url: 'https://github.com/Si-aymen/Courzelo-Devops.git'
            }
        }

        stage('Build') {
            steps {
                // Exécution de la construction Maven
                sh 'mvn -f backendPidev/pom.xml clean install'
            }
        }
        
            
     //   git branch: 'nourchainesahli-5SAE7-G6', url: 'https://github.com/Si-aymen/5SAE7-G6-CourZelo.git'
        
        
      /*   stage('GIT') {
            steps {
                         // Configurer le buffer HTTP de Git avant le clonage
                sh 'git config --global http.postBuffer 1048576000'

                // Clonage du dépôt Git depuis la branche nourchaine
               // 
        sh 'git config --global http.maxRequestBuffer 524288000'
        sh 'git config --global core.compression 9'
        sh 'git config --global http.lowSpeedLimit 1024'
        sh 'git config --global http.lowSpeedTime 60'
                git branch: 'nourchainesahli-5SAE7-G6',
                    url: 'https://github.com/Si-aymen/5SAE7-G6-CourZelo.git'
            }
        }*/

     

        stage('Test') {
            /* steps {
                // Exécution des tests Maven
                sh 'mvn -f backendPidev/pom.xml test'
            } */ 
            steps {
                dir('backendPidev') {
                    script {
                        try {
                            sh 'mvn test'
                        } catch (Exception e) {
                            error "Tests failed: ${e}"
                        }
                    }
                }
            }
        }
        
        stage('JUnit/Mockito') {
    steps {
        script {
            dir("backendPidev") {
            // Utilisation de Maven installé globalement
        //    sh './mvnw clean install -DskipTests'
                sh 'chmod +x ./mvnw'
            sh './mvnw test'
            junit '**/target/surefire-reports/*.xml'
        }
        }
    }
}

        
         stage('Generate Report') {
            steps {
                dir('backendPidev') {
                    script {
                        sh 'mvn surefire-report:report'
                    }
                }
            }
        }
         stage('JaCoCo Report') {
            steps {
                script {
                    // Assurez-vous que les fichiers de couverture JaCoCo existent
                    echo "Generating JaCoCo report..."
                    jacoco(
                        execPattern: '**/target/jacoco.exec', // Chemin du fichier de couverture JaCoCo
                        classPattern: '**/target/classes', // Chemin des classes compilées
                        sourcePattern: '**/src/main/java' // Chemin du code source
                    )
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('admin') { //  serveur SonarQube  configuré dans Jenkins
                    sh "mvn -f backendPidev/pom.xml sonar:sonar -Dsonar.login=$SONARQUBE_TOKEN"
                 //    cleanWs() 
                 //   sh "mvn -f backendPidev/pom.xml sonar:sonar -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.scanner.forceAnalysis=true"

                }
            }
        }
        
       
        stage('Deploy to Nexus') {
            steps {
                // Déploiement vers Nexus, en ignorant les tests
                sh 'mvn -f backendPidev/pom.xml deploy -DskipTests'
            }
        }

        
        stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image'
                    sh 'docker build -t nourchaine/sahli-5sae7-g6:latest -f backendPidev/Dockerfile .'
                }
            }
        }

        stage('Login Docker') {
            steps {
                echo 'Login to DockerHub'
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
        }

        stage('Push Image') {
            steps {
                script {
                    echo 'Pushing Docker Image to Docker Hub'
                    sh 'docker push nourchaine/sahli-5sae7-g6:latest'
                }
            }
        } 
        
        stage('Run Docker Compose') {
            steps {
                dir('backendPidev') {
                    script {
                        try {
                            sh 'docker compose -f docker-compose.yaml up -d'
                        } catch (Exception e) {
                            error "Docker Compose up failed: ${e}"
                        }
                    }
                }
            }
        }
        
    }

    post {
        success {
            mail to: 'nourchaine.sahli@gmail.com',
                 subject: "Succès du build: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                 body: "Le build a réussi pour ${env.JOB_NAME} - ${env.BUILD_NUMBER}. Consultez les détails ici : ${env.BUILD_URL}"
            echo "Pipeline completed successfully Sending Email ." 
        }
        failure {
            mail to: 'nourchaine.sahli@gmail.com',
                 subject: "Échec du build: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                 body: "Le build a échoué pour ${env.JOB_NAME} - ${env.BUILD_NUMBER}. Consultez les détails ici : ${env.BUILD_URL}"
        }
        }
    
