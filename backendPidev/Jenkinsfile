pipeline {
    agent any
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                dir('backendPidev') {
                    script {
                        try {
                            sh 'mvn clean install'
                        } catch (Exception e) {
                            error "Build failed: ${e}"
                        }
                    }
                }
            }
        }

         stage('Test') {
                    steps {
                        dir('backendPidev') {
                            script {
                                try {
                                    sh 'mvn test'
                                } catch (Exception e) {
                                    error "Tests failed: ${e}"
                                }
                            }
                        }
                    }
                }
        
        stage('SonarQube Analysis') {
    steps {
        dir('backendPidev') {
            sh 'mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=Seif2066-2066 -Dmaven.test.skip=true'
        }
    }
}


         stage('Generate JaCoCo Report') {
                    steps {
                        echo 'Generating JaCoCo Report'
                        dir("$BASE_DIR") {
                            sh 'mvn jacoco:report'
                        }
                    }
                }

                stage('JaCoCo Coverage Report') {
                    steps {
                        echo 'Publishing JaCoCo Coverage Report'
                        step([$class: 'JacocoPublisher',
                              execPattern: '**/target/jacoco.exec',
                              classPattern: '**/target/classes/**/*.class',
                              sourcePattern: '**/src/main/java/**/*.java',
                              exclusionPattern: '**/target/**,**/*Test*,**/_javassist/**'
                        ])
                    }
                }



 stage('Build Docker Image') {
            steps {
                script {
                    echo 'Building Docker Image'
                    sh 'docker build -t seif2066/devops-integration:latest --build-arg JAR_FILE=target/devops-integration.jar  -f backendPidev/Dockerfile backendPidev'
                }
            }
        }


stage('Run Docker Compose') {
            steps {
                dir('backendPidev') {
                    script {
                        try {
                            sh 'docker-compose up -d'
                        } catch (Exception e) {
                            error "Docker Compose up failed: ${e}"
                        }
                    }
                }
            }
        }

         stage('Deploy to Nexus') {
                     steps {
                         dir('backendPidev') {
                             script {
                                 try {
                                     sh 'mvn deploy -s ~/.m2/settings.xml -X'
                                 } catch (Exception e) {
                                     error "Deployment failed: ${e}"
                                 }
                             }
                         }
                     }
                 }

    }
    post {
        always {
            echo 'Pipeline finished.'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
